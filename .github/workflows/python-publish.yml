# .github/workflows/auto-release-and-publish.yml
name: Auto Release and Upload Python Package

on:
  push:
    branches: [ main, master ]  # Adjust branch name as needed

permissions:
  contents: write
  id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing

jobs:
  auto-release:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump_version.outputs.new_version }}
      version_changed: ${{ steps.check_changes.outputs.version_changed }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        pip install toml

    - name: Get current version
      id: current_version
      run: |
        python -c "
        import toml
        with open('pyproject.toml', 'r') as f:
            data = toml.load(f)
        print('version=' + data['project']['version'])
        " >> $GITHUB_OUTPUT

    - name: Bump version
      id: bump_version
      run: |
        python -c "
        import toml
        
        with open('pyproject.toml', 'r') as f:
            data = toml.load(f)
        
        current_version = data['project']['version']
        # Parse version (assumes semantic versioning: major.minor.patch)
        version_parts = current_version.split('.')
        major, minor, patch = int(version_parts[0]), int(version_parts[1]), int(version_parts[2])
        
        # Increment patch version (you can customize this logic)
        patch += 1
        new_version = f'{major}.{minor}.{patch}'
        
        # Update version in pyproject.toml
        data['project']['version'] = new_version
        
        with open('pyproject.toml', 'w') as f:
            toml.dump(data, f)
        
        print(f'new_version={new_version}')
        " >> $GITHUB_OUTPUT

    - name: Check if version changed
      id: check_changes
      run: |
        if git diff --quiet pyproject.toml; then
          echo "version_changed=false" >> $GITHUB_OUTPUT
        else
          echo "version_changed=true" >> $GITHUB_OUTPUT
        fi

    - name: Commit version bump
      if: steps.check_changes.outputs.version_changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add pyproject.toml
        git commit -m "Bump version to ${{ steps.bump_version.outputs.new_version }}"

    - name: Push changes
      if: steps.check_changes.outputs.version_changed == 'true'
      run: git push

    - name: Create Release
      if: steps.check_changes.outputs.version_changed == 'true'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.bump_version.outputs.new_version }}
        name: Release v${{ steps.bump_version.outputs.new_version }}
        body: |
          Auto-generated release for version ${{ steps.bump_version.outputs.new_version }}
          
          ## Changes
          - Version bumped from ${{ steps.current_version.outputs.version }} to ${{ steps.bump_version.outputs.new_version }}
          
          ## Commit
          ${{ github.event.head_commit.message }}
        draft: false
        prerelease: false

  release-build:
    runs-on: ubuntu-latest
    needs: auto-release
    if: needs.auto-release.outputs.version_changed == 'true'
    
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main  # Get the latest commit with version bump
          
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"
          
      - name: Build release distributions
        run: |
          # NOTE: put your own distribution build steps here.
          python -m pip install build
          python -m build
          
      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  pypi-publish:
    runs-on: ubuntu-latest
    needs:
      - auto-release
      - release-build
    if: needs.auto-release.outputs.version_changed == 'true'
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write
    # Dedicated environments with protections for publishing are strongly recommended.
    environment:
      name: pypi
      url: https://pypi.org/project/slurmster
      
    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/
          
      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
